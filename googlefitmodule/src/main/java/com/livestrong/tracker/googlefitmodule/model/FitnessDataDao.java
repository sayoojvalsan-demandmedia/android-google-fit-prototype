package com.livestrong.tracker.googlefitmodule.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.livestrong.tracker.googlefitmodule.model.FitnessData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FITNESS_DATA".
*/
public class FitnessDataDao extends AbstractDao<FitnessData, Long> {

    public static final String TABLENAME = "FITNESS_DATA";

    /**
     * Properties of entity FitnessData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "Date", false, "DATE");
        public final static Property Fitness_step_count = new Property(2, Integer.class, "Fitness_step_count", false, "FITNESS_STEP_COUNT");
        public final static Property FItness_distance = new Property(3, Float.class, "FItness_distance", false, "FITNESS_DISTANCE");
        public final static Property Fitness_calorie_count = new Property(4, Float.class, "Fitness_calorie_count", false, "FITNESS_CALORIE_COUNT");
        public final static Property Fitness_time = new Property(5, java.util.Date.class, "Fitness_time", false, "FITNESS_TIME");
    };


    public FitnessDataDao(DaoConfig config) {
        super(config);
    }
    
    public FitnessDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FITNESS_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" INTEGER," + // 1: Date
                "\"FITNESS_STEP_COUNT\" INTEGER," + // 2: Fitness_step_count
                "\"FITNESS_DISTANCE\" REAL," + // 3: FItness_distance
                "\"FITNESS_CALORIE_COUNT\" REAL," + // 4: Fitness_calorie_count
                "\"FITNESS_TIME\" INTEGER);"); // 5: Fitness_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FITNESS_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FitnessData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(2, Date.getTime());
        }
 
        Integer Fitness_step_count = entity.getFitness_step_count();
        if (Fitness_step_count != null) {
            stmt.bindLong(3, Fitness_step_count);
        }
 
        Float FItness_distance = entity.getFItness_distance();
        if (FItness_distance != null) {
            stmt.bindDouble(4, FItness_distance);
        }
 
        Float Fitness_calorie_count = entity.getFitness_calorie_count();
        if (Fitness_calorie_count != null) {
            stmt.bindDouble(5, Fitness_calorie_count);
        }
 
        java.util.Date Fitness_time = entity.getFitness_time();
        if (Fitness_time != null) {
            stmt.bindLong(6, Fitness_time.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FitnessData readEntity(Cursor cursor, int offset) {
        FitnessData entity = new FitnessData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // Date
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Fitness_step_count
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // FItness_distance
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // Fitness_calorie_count
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // Fitness_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FitnessData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setFitness_step_count(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setFItness_distance(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setFitness_calorie_count(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setFitness_time(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FitnessData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FitnessData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
